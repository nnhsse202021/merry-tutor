<link href="/css/navbar.css" rel="stylesheet" type="text/css"/>
<nav class= "navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container-fluid">
        <div class="navbar-header">
            <a class="navbar-brand" href="/">
                <img src="/img/merrytutorlogo.png" alt="" width="81" height="57">
            </a>
        </div>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <% if (typeof user == "object" && user.roles.includes("tutor")) {%>
                    <li class="nav-item">
                        <a class="nav-link" href="/summary/new">Submit a Session</a>
                    </li>
                <% } %>
                <% if (typeof user == "object" && (user.roles.includes("tutee"))) {%>
                    <li class="nav-item">
                        <a class="nav-link" href="/tutee/<%= typeof user == "object" ? user._id : ""%>">My Session Summaries</a>
                    </li>
                <% } %>
                <% if (typeof user == "object" && user.roles.includes("parent")) {%>
                    <li class="nav-item">
                        <a class="nav-link"href="/parent/mytuteesummaries" >My Tutee Summaries</a>
                    </li>
                <% } %>
                <% if (typeof user == "object" && user.roles.includes("board")) {%>
                    <li class="nav-item">
                        <a class="nav-link"href="/board/allsummaries" >All Summaries</a>
                    </li>
                <% } %>
            </ul>
            <div class="d-flex justify-content-center">
                <% if (typeof user == "object" && user.roles.includes("tutor")) {%>
                <div id="tutee-search-container" class="autocomplete">
                    <input autocomplete="off" id="tutee-search" class="form-control" placeholder="Search For a Tutee">
                </div>
                <% } %>
                <div class="mx-2">
                    <% if (typeof user != "object") {%>
                        <a class="btn btn-outline-light" href="/login">Login/Sign Up</a>
                    <% } else {%>
                        <div class="dropdown">
                            <button class="btn btn-outline-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-person-lines-fill"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="/profile">My Profile</a></li>
                                <% if (typeof user == "object" && user.roles.includes("board")) {%>
                                    <li><a class="dropdown-item" href="/board/addtutor" >Add Tutor</a></li>
                                    <li><a class="dropdown-item" href="/board/managetutor" >Manage Tutor</a></li>
                                <% } %>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <div class="d-flex justify-content-center">
                                        <a class="btn btn-outline-danger btn-sm mx-3 w-75" href="/auth/logout">Log Out</a>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <script> 
            function autocomplete(inp, arr) {
                /*the autocomplete function takes two arguments,
                the text field element and an array of possible autocompleted values:*/
                var currentFocus;
                /*execute a function when someone writes in the text field:*/
                inp.addEventListener("input", async function(e) {
                    var a, b, i, val = this.value.toLowerCase(); /*val is user input*/
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if (!val) { return false;}
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.classList.add("list-group");
                    a.classList.add("autocomplete-items");
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    let arr = await (await fetch("/autocomplete?input=" + val)).json();
                    console.log(arr)
                    for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    let option = arr[i]
                    if (option[0].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        b.classList.add(["list-group-item"])
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + option[0].substr(0, val.length) + "</strong>";
                        b.innerHTML += option[0].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + option[0] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function(e) {
                            /*insert the value for the autocomplete text field:*/
                            window.location.href = `/tutee/${option[1]}`
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                    }
                });
                /*execute a function  presses a key on the keyboard:*/
                inp.addEventListener("keydown", function(e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                    } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                    } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                    }
                });
                function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
                }
                function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
                }
                function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                    }
                }
                }
                /*execute a function when someone clicks in the document:*/
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }
            
            autocomplete(document.getElementById("tutee-search"));
            </script>
    </div>
</nav>